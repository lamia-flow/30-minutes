{"version":3,"sources":["icon/citybike.svg","icon/youarehere.svg","icon/notgonnamakeit.svg","ThirtyMinutesMap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pointerIcon","L","Icon","iconUrl","require","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","notPointerIcon","MyPopupMarker","station","position","icon","isInside","ROUTE_QUERY","gql","y","x","data","useQuery","console","log","duration","plan","itineraries","walkDistance","Marker","Popup","name","bikesAvailable","MyMarkersList","prevProps","prevState","stations","this","props","nextProps","nextState","length","items","map","key","id","React","Component","ThirtyMinutesMap","stationsInsideCircle","center","centerLatLng","latLng","filter","distanceTo","lat","lng","center_x","center_y","radius","Math","sqrt","locationMarkerIcon","Leaflet","locationIcon","shadowSize","shadowAnchor","Map","zoom","style","height","width","TileLayer","attribution","url","Circle","client","ApolloClient","uri","App","getStationList","axios","get","headers","then","response","setState","catch","state","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a4a41ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/citybike.36bcc6d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/youarehere.eb9a9cc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/notgonnamakeit.cb5634bc.svg\";","import React, { Fragment } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport \"leaflet/dist/leaflet.css\";\nimport {\n  Map,\n  TileLayer,\n  Marker,\n  Popup,\n  Circle\n} from \"react-leaflet\";\nimport Leaflet from 'leaflet'\nimport L from 'leaflet'\nimport locationIcon from './icon/youarehere.svg'\n\nconst windowSizing = () => ({\n  height: `100vh`,\n  width: `100vw`\n});\n\nexport const pointerIcon = new L.Icon({\n  iconUrl: require('./icon/citybike.svg'),\n  iconRetinaUrl: require('./icon/citybike.svg'),\n  iconAnchor: [5, 55],\n  popupAnchor: [10, -44],\n  iconSize: [25, 45],\n})\nexport const notPointerIcon = new L.Icon({\n  iconUrl: require('./icon/citybike.svg'),\n  iconRetinaUrl: require('./icon/notgonnamakeit.svg'),\n  iconAnchor: [5, 55],\n  popupAnchor: [10, -44],\n  iconSize: [25, 45],\n})\n\nconst MyPopupMarker = ({ station, position }) => {\n  const icon = station.isInside \n      ? pointerIcon\n      : notPointerIcon;\n  const ROUTE_QUERY = gql`\n  {\n    plan(\n      fromPlace: \"${position[0]},${position[1]}\"\n      toPlace: \"${station.y},${station.x}\"\n      numItineraries: 1\n      transportModes: [{ mode: BICYCLE, qualifier: RENT }, { mode: WALK }]\n    ) {\n      itineraries {\n        walkDistance\n        duration\n        legs {\n          mode\n          startTime\n          endTime\n          from {\n            lat\n            lon\n            name\n            bikeRentalStation {\n              stationId\n              name\n            }\n          }\n          to {\n            lat\n            lon\n            name\n            bikeRentalStation {\n              stationId\n              name\n            }\n          }\n          distance\n          legGeometry {\n            length\n            points\n          }\n        }\n      }\n    }\n  }\n`;\n  const { data } = useQuery(ROUTE_QUERY);\n  data && console.log(data)\n  const duration =\n    data && data.plan.itineraries[0] && (data.plan.itineraries[0].duration);\n  const walkDistance =\n    data && data.plan.itineraries[0] && data.plan.itineraries[0].walkDistance;\n  if ((duration/60) < 30) {\n    return (\n      <Marker position={[station.y, station.x]} icon={icon}>\n        <Popup>\n          <div>{station.name}</div>\n          <div>Num. of Bikes: {station.bikesAvailable}</div>\n          <div>Duration: {duration}</div>\n          <div>Distance: {walkDistance}</div>\n        </Popup>\n      </Marker>\n    );\n  }\n  return (\n    <Marker position={[station.y, station.x]} icon={icon}>\n        <Popup>\n          <div>TOO FAR : {station.name}</div>\n          <div>Num. of Bikes: {station.bikesAvailable}</div>\n          <div>Duration: {duration}</div>\n          <div>Distance: {walkDistance}</div>\n        </Popup>\n      </Marker>\n  )\n};\n\nclass MyMarkersList extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.stations !== this.props.stations) {\n      return true;\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.stations !== this.props.stations) {\n      return true;\n    }\n  }\n\n    render() {\n      if(this.props.stations && this.props.stations.length > 0) {\n        const items = this.props.stations.map(station => (\n          <MyPopupMarker key={station.id} station={station} position={this.props.position} />\n        ))\n        return <Fragment>{items}</Fragment>\n      }\n      return <div>Empty</div>\n    }\n}\n\nclass ThirtyMinutesMap extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.lat !== this.props.lat ||\n      prevProps.lng !== this.props.lng ||\n      prevProps.stations !== this.props.stations\n    ) {\n      return true;\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.lat !== this.props.lat ||\n      nextProps.lng !== this.props.lng ||\n      nextProps.stations !== this.props.stations\n    ) {\n      return true;\n    }\n  }\n\n  stationsInsideCircle = (stations, center) => {\n    const centerLatLng = new L.latLng(center);\n    return stations.filter(station => {\n      return centerLatLng.distanceTo([station.y, station.x]) < 6000;\n    });\n  }\n\n  // lat y\n  // lng x\n  insideCircle(x, y, center_x, center_y, radius) {\n    return Math.sqrt(x - center_x) + Math.sqrt(y - center_y) <= Math.sqrt(radius);\n  }\n\n  render() {\n      // @todo: somewhere else\n     const locationMarkerIcon = Leaflet.icon({\n      iconUrl: locationIcon,\n      iconSize: [35, 35],\n      iconAnchor: [15.5, 15.5],\n      popupAnchor: [-3, -26],\n      shadowSize: [20, 20],\n      shadowAnchor: [22, 24]\n    });\n\n    const position = [this.props.lat, this.props.lng];\n    const {stations} = this.props\n    console.log(stations)\n    // Latitude: 1 deg = 110.574 km\n\n    return (\n        <Map center={position} zoom={11} style={windowSizing()}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://cdn.digitransit.fi/map/v1/hsl-map-256/{z}/{x}/{y}.png\"\n          />\n          {this.props.stations && stations && <MyMarkersList stations={this.stationsInsideCircle(stations, position)} position={position}/>}\n          <Marker position={position} icon={locationMarkerIcon}>\n            <Popup>You are here</Popup>\n          </Marker>\n          <Circle center={position} radius={6000}></Circle>\n        </Map>\n      );\n  }\n}\n\nexport default ThirtyMinutesMap;\n","import React from \"react\";\nimport \"./App.css\";\nimport ThirtyMinutesMap from \"./ThirtyMinutesMap\";\nimport axios from \"axios\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\"\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lat: null,\n      lng: null,\n      zoom: 13,\n      stations: null\n    };\n  }\n\n  getStationList = () => {\n    axios\n      .get(\"https://api.digitransit.fi/routing/v1/routers/hsl/bike_rental\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n      .then(response => {\n        this.setState({\n          stations: response.data.stations\n        });\n      })\n      .catch(() => {\n        console.log(\"Failed to fetch the stations\");\n      });\n  };\n\n  componentDidMount() {\n    if (navigator && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        const coords = pos.coords;\n        console.log(coords);\n        this.setState({\n          lat: coords.latitude,\n          lng: coords.longitude\n        });\n      });\n    }\n    this.getStationList();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.lat !== this.state.lat ||\n      prevState.lng !== this.state.lng ||\n      prevState.stations !== this.state.stations\n    ) {\n      return true;\n    }\n  }\n\n  render() {\n    const { lat, lng, stations } = this.state;\n    if (lat && lng && stations) {\n      return (\n        <ApolloProvider client={client}>\n          <ThirtyMinutesMap\n            lat={lat}\n            lng={lng}\n            stations={stations}\n            key={stations}\n          />\n        </ApolloProvider>\n      );\n    }\n    return <div>Loading...</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}